# before running docker-compose up for the first time,
# either do a pull:
# docker-compose pull
# or do a build:
# GIT_HASH $(git rev-parse --short HEAD) docker-compose up --detach

# subsequently you should only need to run:
# docker-compose up --detach

# force a full re-build with no cache from previous builds:
# docker-compose build --build-arg GIT_HASH $(git rev-parse --short HEAD) --parallel --no-cache

# to stop:
# docker-compose down

version: "3.1"

services:
  server:
    container_name: polis-server
    #env_file: ./server/docker-dev.env
    env_file: ./.universal.env
    build:
      context: ./server
      dockerfile: Dockerfile
    depends_on:
      - "postgres"
      - "file-server"
    #networks:
    #  - "polis-dev"
    ports:
      - "5000:5000"
    environment:
      - PORT=5000
      - HSTS=off
      - VIRTUAL_HOST=demos-surveys.co.uk,www.demos-surveys.co.uk
      - LETSENCRYPT_HOST=demos-surveys.co.uk,www.demos-surveys.co.uk
      - VIRTUAL_PORT=5000
    network_mode: bridge

  math:
    container_name: polis-math
    env_file: ./math/docker-dev.env
    #env_file: ./.universal.env
    depends_on:
      - "postgres"
    build:
      context: ./math
    #networks:
    #  - "polis-dev"
    network_mode: bridge

  postgres:
    container_name: polis-postgres
    #env_file: ./server/docker-db-dev.env
    env_file: ./.universal.env
    restart: always
    build:
      context: ./server
      dockerfile: Dockerfile-db
    #networks:
    #  - "polis-dev"
    volumes:
      - "backups:/backups"
      - "postgres:/var/lib/postgresql/data"
    network_mode: bridge

  file-server:
    container_name: polis-file-server
    build:
      context: ./file-server
      dockerfile: Dockerfile
    depends_on:
      - "client-participation"
      - "client-admin"
      - "client-report"
    #networks:
    #  - "polis-dev"
    ports:
      - "8080:8080"
    network_mode: bridge

  client-participation:
    container_name: polis-client-participation
    image: polisdemo/client-participation:dev
    build:
      context: ./client-participation
      args:
        GIT_HASH: "${GIT_HASH}"

  client-admin:
    container_name: polis-client-admin
    image: polisdemo/client-admin:dev
    build:
      context: ./client-admin
      args:
        GIT_HASH: "${GIT_HASH}"

  client-report:
    container_name: polis-client-report
    image: polisdemo/client-report:dev
    build:
      context: ./client-report
      args:
        GIT_HASH: "${GIT_HASH}"

#networks:
#  polis-dev:

volumes:
  backups:
  postgres:
